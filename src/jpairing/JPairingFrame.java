/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jpairing;

import java.io.File;
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.awt.print.*;
import javax.swing.DefaultCellEditor;
import javax.swing.JTextField;

/**
 *
 * @author Shaun
 */
public class JPairingFrame extends javax.swing.JFrame implements TableModelListener {

    private playerTableModel playerDataModel;
    private pairingTableModel pairingDataModel;
    private TournamentClass tournamentDetails;
    private int current_round;

    /**
     * Creates new form JPairingFrame
     */
    public JPairingFrame() {
        current_round = 0;
        playerDataModel = new playerTableModel();
        pairingDataModel = new pairingTableModel();
        playerDataModel.addBlankRow();
        initComponents();
        playerDataTable.getModel().addTableModelListener(this);
        // playerDataTable.getColumnModel().getColumn(1).setCellEditor(new SelectAllCellEditor(new JTextField()));
        // playerDataTable.setDefaultEditor(playerDataModel.getClass(), new SelectAllCellEditor(new JTextField()));
        // jTable2.setDefaultEditor(pairingDataModel.getClass(), new SelectAllCellEditor(new JTextField()));
        
        
    }
    
    @Override
     public void tableChanged(TableModelEvent e) {
        int row = e.getFirstRow();
        int column = e.getColumn();
        if (column == -1) {
            column = 0;
        }
        TableModel model = (TableModel)e.getSource();
        String columnName = model.getColumnName(column);
        Object data = model.getValueAt(row, column);

        // Do something with the data...
    }
     
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        playerDataTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        addPlayerButton = new javax.swing.JButton();
        deletePlayerButton = new javax.swing.JButton();
        printPlayersButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        automaticPairButton = new javax.swing.JButton();
        updatePairButton = new javax.swing.JButton();
        modifyPairButton = new javax.swing.JButton();
        printPairButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        roundSpinner = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        standingsOutputButton = new javax.swing.JButton();
        crosstableOutputPrint = new javax.swing.JButton();
        pairingsOutputButton = new javax.swing.JButton();
        playerOutputButton = new javax.swing.JButton();
        printOutputButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jFileMenu = new javax.swing.JMenu();
        jNewTournamentMenuItem = new javax.swing.JMenuItem();
        jOpenTournamentMenuItem = new javax.swing.JMenuItem();
        jSaveTournamentMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jModifyTournamentMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jExitMenuItem = new javax.swing.JMenuItem();
        jStandingsMenu = new javax.swing.JMenu();
        jStandingsMenuItem = new javax.swing.JMenuItem();
        jCrosstableMenuItem = new javax.swing.JMenuItem();
        jPairingsMenuItem = new javax.swing.JMenuItem();
        jExtrasMenu = new javax.swing.JMenu();
        jDeleteRoundMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jCSVExportMenuItem = new javax.swing.JMenuItem();
        jHelpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        jMenu6.setText("jMenu6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTabbedPane1.setPreferredSize(getSize());

        jPanel1.setLayout(new java.awt.BorderLayout());

        playerDataTable.setModel(playerDataModel);
        playerDataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerDataTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(playerDataTable);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        addPlayerButton.setText("Add Player");
        addPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlayerButtonActionPerformed(evt);
            }
        });

        deletePlayerButton.setText("Delete Player");
        deletePlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePlayerButtonActionPerformed(evt);
            }
        });

        printPlayersButton.setText("Print");
        printPlayersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printPlayersButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(addPlayerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deletePlayerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(printPlayersButton)
                .addGap(0, 140, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPlayerButton)
                    .addComponent(deletePlayerButton)
                    .addComponent(printPlayersButton))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Player List", jPanel1);

        jTable2.setModel(pairingDataModel);
        jScrollPane3.setViewportView(jTable2);

        automaticPairButton.setText("Automatic");
        automaticPairButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                automaticPairButtonActionPerformed(evt);
            }
        });

        updatePairButton.setText("Update");
        updatePairButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePairButtonActionPerformed(evt);
            }
        });

        modifyPairButton.setText("Modify");
        modifyPairButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyPairButtonActionPerformed(evt);
            }
        });

        printPairButton.setText("Print");
        printPairButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printPairButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Current Round");

        roundSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 0, 1));
        roundSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                roundSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(automaticPairButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updatePairButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(modifyPairButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(printPairButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(roundSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(automaticPairButton)
                    .addComponent(modifyPairButton)
                    .addComponent(jLabel1)
                    .addComponent(roundSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updatePairButton)
                    .addComponent(printPairButton))
                .addGap(43, 43, 43))
        );

        jTabbedPane1.addTab("Pairing Page", jPanel2);

        standingsOutputButton.setText("Standings");
        standingsOutputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standingsOutputButtonActionPerformed(evt);
            }
        });

        crosstableOutputPrint.setText("Crosstable");
        crosstableOutputPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crosstableOutputPrintActionPerformed(evt);
            }
        });

        pairingsOutputButton.setText("Pairings");
        pairingsOutputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pairingsOutputButtonActionPerformed(evt);
            }
        });

        playerOutputButton.setText("Player List");
        playerOutputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerOutputButtonActionPerformed(evt);
            }
        });

        printOutputButton.setText("Print");
        printOutputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printOutputButtonActionPerformed(evt);
            }
        });

        jTextPane1.setFont(new java.awt.Font("Courier New", 0, 10)); // NOI18N
        jScrollPane2.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(standingsOutputButton)
                .addGap(18, 18, 18)
                .addComponent(crosstableOutputPrint)
                .addGap(18, 18, 18)
                .addComponent(pairingsOutputButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playerOutputButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(printOutputButton)
                .addContainerGap())
            .addComponent(jScrollPane2)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standingsOutputButton)
                    .addComponent(crosstableOutputPrint)
                    .addComponent(pairingsOutputButton)
                    .addComponent(printOutputButton)
                    .addComponent(playerOutputButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Output", jPanel3);

        jFileMenu.setText("File");

        jNewTournamentMenuItem.setText("New Tournament");
        jNewTournamentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewTournamentMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jNewTournamentMenuItem);

        jOpenTournamentMenuItem.setText("Open Tournament");
        jOpenTournamentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenTournamentMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jOpenTournamentMenuItem);

        jSaveTournamentMenuItem.setText("Save Tournament");
        jSaveTournamentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveTournamentMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jSaveTournamentMenuItem);
        jFileMenu.add(jSeparator1);

        jModifyTournamentMenuItem.setText("Modify Tournament");
        jModifyTournamentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jModifyTournamentMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jModifyTournamentMenuItem);
        jFileMenu.add(jSeparator2);

        jExitMenuItem.setText("Exit");
        jExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExitMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jExitMenuItem);

        jMenuBar1.add(jFileMenu);

        jStandingsMenu.setText("Standings");

        jStandingsMenuItem.setText("Standings");
        jStandingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStandingsMenuItemActionPerformed(evt);
            }
        });
        jStandingsMenu.add(jStandingsMenuItem);

        jCrosstableMenuItem.setText("Crosstable");
        jCrosstableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCrosstableMenuItemActionPerformed(evt);
            }
        });
        jStandingsMenu.add(jCrosstableMenuItem);

        jPairingsMenuItem.setText("Pairings");
        jPairingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPairingsMenuItemActionPerformed(evt);
            }
        });
        jStandingsMenu.add(jPairingsMenuItem);

        jMenuBar1.add(jStandingsMenu);

        jExtrasMenu.setText("Extras");

        jDeleteRoundMenuItem.setText("Delete Current Round");
        jDeleteRoundMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteRoundMenuItemActionPerformed(evt);
            }
        });
        jExtrasMenu.add(jDeleteRoundMenuItem);
        jExtrasMenu.add(jSeparator3);

        jCSVExportMenuItem.setText("Export Tournament in CSV Format");
        jCSVExportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCSVExportMenuItemActionPerformed(evt);
            }
        });
        jExtrasMenu.add(jCSVExportMenuItem);

        jMenuBar1.add(jExtrasMenu);

        jHelpMenu.setText("Help");

        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        jHelpMenu.add(helpMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        jHelpMenu.add(aboutMenuItem);

        jMenuBar1.add(jHelpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "JPairing 1.0\n Author: Shaun Press");
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        // TODO add your handling code here:
        String helpText = new String("Help for jPairing 1.0");
        try {
            helpText = new String(Files.readAllBytes(Paths.get("./pypairinghelp.html")));
        } 
        catch (IOException e) {
            System.out.println(e);
        }
        javax.swing.JFrame helpFrame = new javax.swing.JFrame("JPairing Help");
        javax.swing.JEditorPane helpPane = new javax.swing.JEditorPane();
        helpPane.setEditable(false);
        helpPane.setContentType("text/html");
        helpPane.setText(helpText);
        
        javax.swing.JScrollPane editorScrollPane = new javax.swing.JScrollPane(helpPane);
        editorScrollPane.setVerticalScrollBarPolicy(
                javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        editorScrollPane.setPreferredSize(new java.awt.Dimension(250, 145));
        editorScrollPane.setMinimumSize(new java.awt.Dimension(100, 100));
        
        helpFrame.add(editorScrollPane);
        helpFrame.setSize(500, 500);
        helpFrame.setVisible(true);

        // JOptionPane.showMessageDialog(this, helpText);
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void addPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlayerButtonActionPerformed
        // TODO add your handling code here:
        int rounds = 0;
        if (null != tournamentDetails) {
            rounds = tournamentDetails.getTotal_rounds();
        } else {
            JOptionPane.showMessageDialog(null, "Warning: Tournament has not been created");
            return;
        }
        playerDataModel.addBlankRow();
    }//GEN-LAST:event_addPlayerButtonActionPerformed

    private void deletePlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlayerButtonActionPerformed
        // TODO add your handling code here:
        if (pairingDataModel.getRounds() > 0) {
            JOptionPane.showMessageDialog(null, "Warning: Unable to delete player. Event has begun");
            return;
        }
        int rowNo = playerDataTable.getSelectedRow();
        if (rowNo > -1) {
            playerDataModel.deleteRow(rowNo);
        }
    }//GEN-LAST:event_deletePlayerButtonActionPerformed

    private void jSaveTournamentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveTournamentMenuItemActionPerformed
        // TODO add your handling code here:
        final JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "Abstract Pairing System", "aps");
        fc.setFileFilter(filter);
        
        int returnVal = fc.showSaveDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filePath = file.getAbsolutePath();
            if (!filePath.endsWith(".aps")) {
                file = new File(filePath+".aps");
            }
            
            // Handle file save here
            Path path = file.toPath();
            writeTournamentFile(path);
        }                                         
        
    }//GEN-LAST:event_jSaveTournamentMenuItemActionPerformed

    private void jExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExitMenuItemActionPerformed
        // TODO add your handling code here:
        int exit_code = JOptionPane.showConfirmDialog(this, "Do you mean to exit?","Exit Program",
                JOptionPane.YES_NO_OPTION);
        if (exit_code == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
        
    }//GEN-LAST:event_jExitMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int exit_code = JOptionPane.showConfirmDialog(this, "Do you mean to exit?","Exit Program",
                JOptionPane.YES_NO_OPTION);
        if (exit_code == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    }//GEN-LAST:event_formWindowClosing

    private void jNewTournamentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewTournamentMenuItemActionPerformed
        // TODO add your handling code here:
        if (tournamentDetails != null) {
            int exit_code = JOptionPane.showConfirmDialog(this, "There is currently an active event. Do you wish to create a new event","New Tournament",
                JOptionPane.YES_NO_OPTION);
            if (exit_code == JOptionPane.NO_OPTION) {
                return;
            }
        }
        resetTournament();
        TournamentDetailsDialog myDialog = new TournamentDetailsDialog(this,true);
        int dialogResult = myDialog.showDialog();
        
        if (dialogResult == 1 ) {
            tournamentDetails = new TournamentClass();
            tournamentDetails.setName(myDialog.getjNameTextField().getText());
            tournamentDetails.setPlace(myDialog.getjPlaceTextField().getText());
            tournamentDetails.setBegin_date((Date)myDialog.getjStartDateSpinner().getValue());
            tournamentDetails.setEnd_date((Date)myDialog.getjEndDateSpinner().getValue());
            tournamentDetails.setTotal_rounds((int)myDialog.getjRoundsSpinner().getValue());
            
            
            this.setTitle(tournamentDetails.getName());
        }
        
        
        
    }//GEN-LAST:event_jNewTournamentMenuItemActionPerformed

    private void resetTournament() {
        if (null != playerDataModel) {
            playerDataModel.resetPlayerList();
        }
        
        if (null != pairingDataModel) {
            pairingDataModel.resetPairingList();
            javax.swing.SpinnerNumberModel spinModel = new javax.swing.SpinnerNumberModel(0,0,0,1);
            roundSpinner.setModel(spinModel);
            
        }
        
        if (null != tournamentDetails) {
            tournamentDetails = new TournamentClass();
        }
        
        current_round = 0;
    }
    
    private void jOpenTournamentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenTournamentMenuItemActionPerformed
        // TODO add your handling code here:
        final JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "Abstract Pairing System", "aps");
        // fc.addChoosableFileFilter(filter);
        fc.setFileFilter(filter);
        
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            Path path = file.toPath();
            // Handle file read here
            resetTournament();
            readTournamentFile(path);
        }
    }//GEN-LAST:event_jOpenTournamentMenuItemActionPerformed

    private void automaticPairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_automaticPairButtonActionPerformed
        // TODO add your handling code here:
        if (current_round < pairingDataModel.getRounds()) {
            JOptionPane.showMessageDialog(null, "Warning Round "+(current_round+1)+" already paired");
            return;
        }
        if (playerDataModel.getRowCount() < 3) {
            JOptionPane.showMessageDialog(null, "Warning: Insufficient players to pair");
            return;
        }
        current_round += 1;
        SimplePairingClass new_pairings = new SimplePairingClass(playerDataModel.getPlayers(),current_round);
        PairingListClass pair_list = new_pairings.make_pairings();
        pairingDataModel.addPairings(pair_list);
        playerDataModel.add_blank_results(current_round, pair_list);
        roundSpinner.setValue(new Integer(current_round));
        javax.swing.SpinnerNumberModel spinModel = new javax.swing.SpinnerNumberModel(current_round,0,current_round,1);
        roundSpinner.setModel(spinModel);
    }//GEN-LAST:event_automaticPairButtonActionPerformed

    private void crosstableOutputPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crosstableOutputPrintActionPerformed
        // Output crosstable as string
        if (current_round < 1) {
            jTextPane1.setText("");
            return;
        }
        String crosstable_text = "Place \tPlayer Name \tRating \t";
        for (int i=0;i<current_round;i++) {
            crosstable_text += Integer.toString(i+1)+"\t";
        }
        crosstable_text += "MP \tVP \tVP% \tWins \n";
        crosstable_text += playerDataModel.player_crosstable_list(current_round);
        jTextPane1.setText(makePrinterText(crosstable_text));
    }//GEN-LAST:event_crosstableOutputPrintActionPerformed

    private void standingsOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standingsOutputButtonActionPerformed
        // Output standings as string
        if (current_round < 1) {
            jTextPane1.setText("");
            return;
        }
        String standingsText = "Place \tPlayer Name \tRating \tMP \tVP \tVP% \tWins \n";
        standingsText += playerDataModel.player_standing_list(current_round);
        jTextPane1.setText(makePrinterText(standingsText));
    }//GEN-LAST:event_standingsOutputButtonActionPerformed

    private void roundSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_roundSpinnerStateChanged
        // TODO add your handling code here:
        try {
            roundSpinner.commitEdit();
        } catch ( java.text.ParseException e ) { }
        int value = (Integer) roundSpinner.getValue();
        current_round = value;
        pairingDataModel.update_display(value);
    }//GEN-LAST:event_roundSpinnerStateChanged

    private void jModifyTournamentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jModifyTournamentMenuItemActionPerformed
        // TODO add your handling code here:
        if (tournamentDetails == null) {
            jNewTournamentMenuItemActionPerformed(evt);
            return;
        }
        TournamentDetailsDialog myDialog = new TournamentDetailsDialog(this,true);
        myDialog.getjNameTextField().setText(tournamentDetails.getName());
        myDialog.getjPlaceTextField().setText(tournamentDetails.getPlace());
        myDialog.getjStartDateSpinner().setValue(tournamentDetails.getBegin_date());
        myDialog.getjEndDateSpinner().setValue(tournamentDetails.getEnd_date());
        myDialog.getjRoundsSpinner().setValue(tournamentDetails.getTotal_rounds());
                
        int dialogResult = myDialog.showDialog();
        
        if (dialogResult == 1 ) {
            tournamentDetails.setName(myDialog.getjNameTextField().getText());
            tournamentDetails.setPlace(myDialog.getjPlaceTextField().getText());
            tournamentDetails.setBegin_date((Date)myDialog.getjStartDateSpinner().getValue());
            tournamentDetails.setEnd_date((Date)myDialog.getjEndDateSpinner().getValue());
            tournamentDetails.setTotal_rounds((int)myDialog.getjRoundsSpinner().getValue());
            
            
            this.setTitle(tournamentDetails.getName());
        }
    }//GEN-LAST:event_jModifyTournamentMenuItemActionPerformed

    private void pairingsOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pairingsOutputButtonActionPerformed
        // Show pairings on output page
        if (current_round < 1) {
            jTextPane1.setText("");
            return;
        }
        String header_text = "Pairings for Round: "+Integer.toString(current_round)+"\n";
        String output_text = "Board \tPlayer \tCurrent Score \tMP \tVP\n";
        output_text += "=====================================================\n";
        output_text += pairingDataModel.getPairingsText(current_round);
        jTextPane1.setText(makePrinterText(output_text));
    }//GEN-LAST:event_pairingsOutputButtonActionPerformed

    private void playerDataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerDataTableMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == 3) {
            int row = playerDataTable.getSelectedRow();
            if (row > -1) {
                PlayerClass player = playerDataModel.get_player(row);
                AvailabilityDialog playerAvailible = new AvailabilityDialog(this,true);
                int total_rounds = 0;
                if (null != tournamentDetails) {
                    total_rounds  = tournamentDetails.getTotal_rounds();
                }
                playerAvailible.addData(player,total_rounds);
                int result = playerAvailible.showDialog();
                if (result == 1) {
                    for (int i = 0; i<total_rounds; i++) {
                        player.change_availability(i, playerAvailible.get_check_value(i));
                    }
                }
            }
        }
    }//GEN-LAST:event_playerDataTableMouseClicked

    private void jDeleteRoundMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteRoundMenuItemActionPerformed
        // Deletes the most recent round
        if (pairingDataModel.getRounds() == current_round) {
            pairingDataModel.delete_last_round();
            playerDataModel.delete_last_round();
            current_round -= 1;
            javax.swing.SpinnerNumberModel spinModel = new javax.swing.SpinnerNumberModel(0,0,current_round,1);
            roundSpinner.setModel(spinModel);
            roundSpinner.setValue(current_round);
        } else {
            JOptionPane.showMessageDialog(null, "You can only delete the last paired round");
        }
        
    }//GEN-LAST:event_jDeleteRoundMenuItemActionPerformed

    private void printOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printOutputButtonActionPerformed
        // TODO add your handling code here:
        PrinterJob job = PrinterJob.getPrinterJob();
        String[] text_lines = jTextPane1.getText().split("\n");
        job.setPrintable(new OutputPrinter(text_lines));
        boolean doPrint = job.printDialog();
        if (doPrint) {
            try {
                job.print();
            } catch (PrinterException e) {
        // The job did not successfully
        // complete
        }
    }
        
    }//GEN-LAST:event_printOutputButtonActionPerformed

    private void jStandingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStandingsMenuItemActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(2);
        standingsOutputButtonActionPerformed(evt);
    }//GEN-LAST:event_jStandingsMenuItemActionPerformed

    private void jCrosstableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCrosstableMenuItemActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(2);
        crosstableOutputPrintActionPerformed(evt);
    }//GEN-LAST:event_jCrosstableMenuItemActionPerformed

    private void jPairingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPairingsMenuItemActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(2);
        pairingsOutputButtonActionPerformed(evt);
    }//GEN-LAST:event_jPairingsMenuItemActionPerformed

    private void jCSVExportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCSVExportMenuItemActionPerformed
        // TODO add your handling code here:
        final JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "Comma Separated Values", "csv");
        fc.setFileFilter(filter);
        
        int returnVal = fc.showSaveDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filePath = file.getAbsolutePath();
            if (!filePath.endsWith(".csv")) {
                file = new File(filePath+".csv");
            }
            
            // Handle file save here
            Path path = file.toPath();
            writeCSVFile(path);
            
        }
        
    }//GEN-LAST:event_jCSVExportMenuItemActionPerformed

    private void updatePairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePairButtonActionPerformed
        // TODO add your handling code here:
        
        pairingDataModel.update_display(current_round);
    }//GEN-LAST:event_updatePairButtonActionPerformed

    private void modifyPairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyPairButtonActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "To modify pairing, simply change the Board No of selected player(s), then press Update button");
    }//GEN-LAST:event_modifyPairButtonActionPerformed

    private void printPairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printPairButtonActionPerformed
        // TODO add your handling code here:
        if (current_round < 1) {
            return;
        }
        PrinterJob job = PrinterJob.getPrinterJob();
        String output_text = "Board \tPlayer \tCurrent Score \tMP \tVP\n";
        output_text += "=====================================================\n";
        output_text += pairingDataModel.getPairingsText(current_round);       
        String[] text_lines =  makePrinterText(output_text).split("\n");
        job.setPrintable(new OutputPrinter(text_lines));
        boolean doPrint = job.printDialog();
        if (doPrint) {
            try {
                job.print();
            } 
            catch (PrinterException e) {
        // The job did not successfully
        // complete
            }
            
        }
            
        
        
    }//GEN-LAST:event_printPairButtonActionPerformed

    private void printPlayersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printPlayersButtonActionPerformed
        // TODO add your handling code here:
        PrinterJob job = PrinterJob.getPrinterJob();
        String output_text = "Rank \tPlayer \tRating\n";
        output_text += playerDataModel.player_list();
        
        String[] text_lines =  makePrinterText(output_text).split("\n");
        job.setPrintable(new OutputPrinter(text_lines));
        boolean doPrint = job.printDialog();
        if (doPrint) {
            try {
                job.print();
            } 
            catch (PrinterException e) {
        // The job did not successfully
        // complete
            }
            
        }
    }//GEN-LAST:event_printPlayersButtonActionPerformed

    private void playerOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerOutputButtonActionPerformed
        // TODO add your handling code here:
        String output_text = "Rank \tPlayer \tRating\n";
        output_text += playerDataModel.player_list();
        
        jTextPane1.setText(makePrinterText(output_text));
    }//GEN-LAST:event_playerOutputButtonActionPerformed

    private void writeCSVFile(Path path) {
        try {
            BufferedWriter out_file = Files.newBufferedWriter(path, StandardOpenOption.CREATE);
            
            out_file.write(playerDataModel.csvOutput(pairingDataModel.getRounds()));
            out_file.close();
        }
        catch (IOException e) {
            System.out.println(e);
        }
    }
    private void writeTournamentFile(Path path) {
        try {
            BufferedWriter out_file = Files.newBufferedWriter(path, StandardOpenOption.CREATE);
            
            out_file.write(tournamentDetails.fileOutput());
            out_file.write(playerDataModel.fileOutput());
            out_file.write(playerDataModel.filePairingOutput());
            
            out_file.close();
        }
        catch (IOException e) {
            System.out.println(e);
        }
    }
    
    private void readTournamentFile(Path path) {
        // Reads from a aps format file and creates objects etc
        try {
            List<String> list_in = Files.readAllLines(path);
            tournamentDetails = new TournamentClass();
            tournamentDetails.setName(list_in.get(0));
            tournamentDetails.setPlace(list_in.get(1));
            tournamentDetails.setTotal_rounds(Integer.parseInt(list_in.get(4)));
            
            String[] date_string = list_in.get(2).split(",");
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); 
            try {
                tournamentDetails.setBegin_date(dateFormat.parse(date_string[0]));
                tournamentDetails.setEnd_date(dateFormat.parse(date_string[1]));
            } catch (ParseException e) {
                
            }
            
            setTitle(tournamentDetails.getName());
            
            playerDataModel.resetPlayerList();
            int line_count = 6;
            String input_line = list_in.get(line_count);
            while (!input_line.equals("") ) {
                playerDataModel.addNewPlayer(input_line);
                line_count++;
                input_line = list_in.get(line_count);
            }
            
            pairingDataModel.resetPairingList();
            
            // Load result details for each player
            line_count += 2;
            input_line = list_in.get(line_count).trim();
            while (!input_line.equals("")) {
                String[] result_data = input_line.split(" ");
                int player_id = Integer.parseInt(result_data[0]);
                for (int i=1; i < result_data.length; i++) {
                    String[] round_data = result_data[i].split(";");
                    playerDataModel.addPlayerResult(player_id, i, round_data);
                    pairingDataModel.loadPairing(playerDataModel.get_player(player_id-1),i,round_data);
                    
                    
                }
                
                
                line_count += 1;
                input_line = list_in.get(line_count).trim();
                
            }
            int max_rounds = pairingDataModel.getRounds();
            pairingDataModel.make_vp_totals();
            javax.swing.SpinnerNumberModel spinModel = new javax.swing.SpinnerNumberModel(0,0,max_rounds,1);
            roundSpinner.setModel(spinModel);
            current_round = 0; 
            
        }
        catch (IOException e) {
            System.out.println(e);
        }
        
    }
    
    private String makePrinterText(String input_string) {
        // Takes a string a tidies up the output
        int FIELD_SIZE = 8;
        String line_list[] = input_string.split("\\r?\\n");
        // First line is assumed to be headings
        String field_list[] = line_list[0].split("\\t");
        int[] field_width = new int[field_list.length];
        int count = 0;
        for (String field:field_list) {
            int tab_num = (field.length()+FIELD_SIZE-1)/FIELD_SIZE;
            field_width[count++] = tab_num;
        }
        
        for (int i=1; i<line_list.length;i++) {
            if (line_list[i].startsWith("===")) {
                // Ignore === separators
                continue;
            }
            String data_list[] = line_list[i].split("\\t");
            for (int j=0; j<data_list.length;j++) {
                int tabs = (data_list[j].length()+FIELD_SIZE-1)/FIELD_SIZE;
                if (tabs > field_width[j]) {
                    field_width[j] = tabs;
                }
            }
            
        }
        
        int total_width = 0;
        
        for (int i=0; i<field_width.length; i++) {
            field_width[i] = field_width[i]*FIELD_SIZE;
            total_width += field_width[i];
        }
        
        String output_string = "";
        
        for (String line:line_list) {
            if (line.startsWith("===")) {
                output_string += new String(new char[total_width]).replace("\0", "=");
            } else {
                String fields[] = line.split("\\t");
                for (int i=0;i<fields.length;i++) {
                    int extra_spaces = field_width[i] - fields[i].length();
                    output_string += fields[i]+ new String(new char[extra_spaces]).replace("\0", " ");
                }
            }
            output_string += "\n";
        }
        
        return output_string;
        
    } 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JPairingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JPairingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JPairingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JPairingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JPairingFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton addPlayerButton;
    private javax.swing.JButton automaticPairButton;
    private javax.swing.JButton crosstableOutputPrint;
    private javax.swing.JButton deletePlayerButton;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JMenuItem jCSVExportMenuItem;
    private javax.swing.JMenuItem jCrosstableMenuItem;
    private javax.swing.JMenuItem jDeleteRoundMenuItem;
    private javax.swing.JMenuItem jExitMenuItem;
    private javax.swing.JMenu jExtrasMenu;
    private javax.swing.JMenu jFileMenu;
    private javax.swing.JMenu jHelpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jModifyTournamentMenuItem;
    private javax.swing.JMenuItem jNewTournamentMenuItem;
    private javax.swing.JMenuItem jOpenTournamentMenuItem;
    private javax.swing.JMenuItem jPairingsMenuItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JMenuItem jSaveTournamentMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenu jStandingsMenu;
    private javax.swing.JMenuItem jStandingsMenuItem;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JButton modifyPairButton;
    private javax.swing.JButton pairingsOutputButton;
    private javax.swing.JTable playerDataTable;
    private javax.swing.JButton playerOutputButton;
    private javax.swing.JButton printOutputButton;
    private javax.swing.JButton printPairButton;
    private javax.swing.JButton printPlayersButton;
    private javax.swing.JSpinner roundSpinner;
    private javax.swing.JButton standingsOutputButton;
    private javax.swing.JButton updatePairButton;
    // End of variables declaration//GEN-END:variables
}


